# Generated by Django 3.1.2 on 2020-10-29 03:59

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_date', models.DateTimeField(auto_now_add=True)),
                ('total_price', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=30)),
                ('description', models.TextField(blank=True, max_length=200)),
                ('price', models.IntegerField()),
                ('reseller', models.TextField(max_length=200)),
                ('element_stock', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_log', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RequestQuotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('scheduled_date', models.DateField()),
                ('time_range', models.TextField(choices=[('08:00 - 09:30', 1), ('10:00 - 11:30', 2), ('13:00 - 14:30', 3), ('15:00 - 16:30', 4), ('17:00 - 18:30', 5)], max_length=13)),
                ('approved', models.BooleanField()),
                ('service_type', models.TextField(max_length=50)),
                ('description', models.TextField(max_length=200)),
                ('fkUser_int', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved_date', models.DateTimeField(auto_now_add=True)),
                ('realization_date', models.DateTimeField()),
                ('fkAssignment_worker', models.IntegerField()),
                ('fkElement_id', models.IntegerField()),
                ('fkTask_status', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.TextField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z ]+$', 'Only letters.')])),
                ('last_name', models.TextField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z ]+$', 'Only letters.')])),
                ('document_number', models.IntegerField(unique=True)),
                ('phone', models.IntegerField(unique=True)),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('password', models.TextField(max_length=250)),
                ('address', models.TextField(max_length=50)),
                ('gender', models.CharField(choices=[('femenino', 'Femenino'), ('masculino', 'Masculino'), ('prefiero_no_decirlo', 'Prefiero_no_decirlo'), ('otro', 'Otro')], max_length=19)),
                ('type', models.TextField(choices=[('admin', 1), ('client', 2), ('employee', 3)], max_length=8)),
                ('last_login', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
